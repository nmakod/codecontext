# CI/CD Pipeline for CodeContext
name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  ###########################################################
  security:
  ###########################################################
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Run Nancy vulnerability scanner
      run: |
        set -euo pipefail
        NANCY_VERSION=$(curl -s https://api.github.com/repos/sonatype-nexus-community/nancy/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
        curl -fsSL "https://github.com/sonatype-nexus-community/nancy/releases/download/${NANCY_VERSION}/nancy-${NANCY_VERSION}-linux-amd64" -o nancy
        chmod +x nancy
        go list -json -deps ./... | ./nancy sleuth

    - name: Run govulncheck
      uses: golang/govulncheck-action@v1
      with:
        check-latest: true

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...

  ###########################################################
  test:
  ###########################################################
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests

  ###########################################################
  build:
  ###########################################################
    needs: [security, test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target_os: linux
            target_arch: amd64
          - os: ubuntu-latest
            target_os: linux
            target_arch: arm64
          - os: windows-latest
            target_os: windows
            target_arch: amd64
          - os: macos-13
            target_os: darwin
            target_arch: amd64
          - os: macos-latest
            target_os: darwin
            target_arch: arm64
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup QEMU
      if: matrix.target_os == 'linux' && matrix.target_arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Get version
      id: version
      run: |
        VERSION=$(cat VERSION)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.target_os }}
        GOARCH: ${{ matrix.target_arch }}
      run: |
        # Get version and build info
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT="${{ github.sha }}"
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build flags
        LDFLAGS="-X main.version=${VERSION} -X main.buildDate=${BUILD_DATE} -X main.gitCommit=${COMMIT:0:8}"
        
        # Binary name
        BINARY_NAME="codecontext"
        if [[ "${{ matrix.target_os }}" == "windows" ]]; then
          BINARY_NAME="codecontext.exe"
        fi
        
        # Build
        if [[ "${{ matrix.target_os }}" == "linux" && "${{ matrix.target_arch }}" == "arm64" ]]; then
          # Use Docker for Linux ARM64
          GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | awk '{print $2}')
          docker run --rm --platform linux/arm64 \
            -v $PWD:/workspace \
            -w /workspace \
            golang:${GO_VERSION} \
            sh -c "apt-get update && apt-get install -y gcc && go build -ldflags '${LDFLAGS}' -o ${BINARY_NAME} ./cmd/codecontext"
        else
          go build -ldflags "${LDFLAGS}" -o "${BINARY_NAME}" ./cmd/codecontext
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: codecontext-${{ matrix.target_os }}-${{ matrix.target_arch }}
        path: |
          codecontext
          codecontext.exe
        if-no-files-found: error

  ###########################################################
  release:
  ###########################################################
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Determine release type
      id: release_type
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
          echo "type=stable" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          # Check if prerelease
          if [[ "${VERSION}" == *-* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "type=development" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT
          echo "tag=latest" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
        fi

    - name: Prepare release assets
      run: |
        mkdir -p release
        VERSION="${{ steps.release_type.outputs.version }}"
        
        if [[ "${{ steps.release_type.outputs.type }}" == "stable" ]]; then
          # Versioned release
          for artifact in artifacts/*/codecontext*; do
            dir=$(dirname "$artifact")
            platform=$(basename "$dir" | sed 's/codecontext-//')
            filename=$(basename "$artifact")
            ext="${filename##*.}"
            
            if [[ "$ext" == "exe" ]]; then
              cp "$artifact" "release/codecontext-${VERSION}-${platform}.exe"
            else
              cp "$artifact" "release/codecontext-${VERSION}-${platform}"
            fi
          done
        else
          # Development release
          cp artifacts/codecontext-linux-amd64/codecontext release/codecontext-linux-amd64
          cp artifacts/codecontext-linux-arm64/codecontext release/codecontext-linux-arm64
          cp artifacts/codecontext-windows-amd64/codecontext.exe release/codecontext-windows-amd64.exe
          cp artifacts/codecontext-darwin-amd64/codecontext release/codecontext-darwin-amd64
          cp artifacts/codecontext-darwin-arm64/codecontext release/codecontext-darwin-arm64
        fi
        
        # Generate checksums
        cd release && sha256sum * > checksums.txt

    - name: Extract changelog (stable releases)
      if: steps.release_type.outputs.type == 'stable'
      id: changelog
      run: |
        VERSION="${{ steps.release_type.outputs.version }}"
        
        if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
          awk "/## \[${VERSION}\]/,/## \[.*\]/{if(/## \[.*\]/ && !/## \[${VERSION}\]/) exit; print}" CHANGELOG.md | tail -n +2 > release_notes.md
        else
          echo "Release ${VERSION}" > release_notes.md
        fi

    - name: Delete existing development release
      if: steps.release_type.outputs.type == 'development'
      run: |
        gh release delete latest --yes || true
        git push origin :refs/tags/latest || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.release_type.outputs.tag }}
        name: ${{ steps.release_type.outputs.type == 'stable' && format('CodeContext {0}', steps.release_type.outputs.version) || 'Latest Development Build' }}
        bodyFile: ${{ steps.release_type.outputs.type == 'stable' && 'release_notes.md' || '' }}
        body: ${{ steps.release_type.outputs.type == 'development' && format('Latest development build from main branch.\n\n**⚠️ This is an automated development build and may be unstable.**\n\nCommit: {0}', github.sha) || '' }}
        artifacts: "release/*"
        makeLatest: ${{ steps.release_type.outputs.type == 'stable' && steps.release_type.outputs.prerelease == 'false' }}
        prerelease: ${{ steps.release_type.outputs.prerelease }}
        allowUpdates: ${{ steps.release_type.outputs.type == 'development' }}
        replacesArtifacts: ${{ steps.release_type.outputs.type == 'development' }}
        token: ${{ secrets.GITHUB_TOKEN }}