# Release workflow with automated versioning and publishing
name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  ###########################################################
  release-please:
  ###########################################################
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
    - name: Run Release Please
      uses: googleapis/release-please-action@v4
      id: release
      with:
        release-type: go

  ###########################################################
  security:
  ###########################################################
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Run Nancy vulnerability scanner
      run: |
        set -euo pipefail
        NANCY_VERSION=$(curl -s https://api.github.com/repos/sonatype-nexus-community/nancy/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
        curl -fsSL "https://github.com/sonatype-nexus-community/nancy/releases/download/${NANCY_VERSION}/nancy-${NANCY_VERSION}-linux-amd64" -o nancy
        chmod +x nancy
        go list -json -deps ./... | ./nancy sleuth

    - name: Run govulncheck
      uses: golang/govulncheck-action@v1
      with:
        check-latest: true

    - name: Run Gosec Security Scanner
      continue-on-error: true
      uses: securego/gosec@master
      with:
        args: ./...

  ###########################################################
  test:
  ###########################################################
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

  ###########################################################
  build:
  ###########################################################
    needs: [security, test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target_os: linux
            target_arch: amd64
          - os: ubuntu-latest
            target_os: linux
            target_arch: arm64
          - os: windows-latest
            target_os: windows
            target_arch: amd64
          - os: macos-13
            target_os: darwin
            target_arch: amd64
          - os: macos-latest
            target_os: darwin
            target_arch: arm64
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup QEMU
      if: matrix.target_os == 'linux' && matrix.target_arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Get version info
      id: version
      run: |
        if [[ "${{ needs.release-please.outputs.release_created }}" == "true" ]]; then
          VERSION="${{ needs.release-please.outputs.version }}"
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.target_os }}
        GOARCH: ${{ matrix.target_arch }}
      run: |
        # Get version and build info
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT="${{ github.sha }}"
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build flags
        LDFLAGS="-s -w -X main.version=${VERSION} -X main.buildDate=${BUILD_DATE} -X main.gitCommit=${COMMIT:0:8}"
        
        # Binary name
        BINARY_NAME="codecontext"
        if [[ "${{ matrix.target_os }}" == "windows" ]]; then
          BINARY_NAME="codecontext.exe"
        fi
        
        # Build
        if [[ "${{ matrix.target_os }}" == "linux" && "${{ matrix.target_arch }}" == "arm64" ]]; then
          # Use Docker for Linux ARM64
          GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | awk '{print $2}')
          docker run --rm --platform linux/arm64 \
            -v $PWD:/workspace \
            -w /workspace \
            golang:${GO_VERSION} \
            sh -c "apt-get update && apt-get install -y gcc && go build -buildvcs=false -ldflags '${LDFLAGS}' -o ${BINARY_NAME} ./cmd/codecontext"
        else
          go build -buildvcs=false -ldflags "${LDFLAGS}" -o "${BINARY_NAME}" ./cmd/codecontext
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: codecontext-${{ matrix.target_os }}-${{ matrix.target_arch }}
        path: |
          codecontext
          codecontext.exe
        if-no-files-found: error

  ###########################################################
  publish-development:
  ###########################################################
    if: ${{ needs.release-please.outputs.release_created != 'true' }}
    needs: [release-please, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare development release
      run: |
        mkdir -p release
        
        # Copy artifacts with standard names
        cp artifacts/codecontext-linux-amd64/codecontext release/codecontext-linux-amd64
        cp artifacts/codecontext-linux-arm64/codecontext release/codecontext-linux-arm64
        cp artifacts/codecontext-windows-amd64/codecontext.exe release/codecontext-windows-amd64.exe
        cp artifacts/codecontext-darwin-amd64/codecontext release/codecontext-darwin-amd64
        cp artifacts/codecontext-darwin-arm64/codecontext release/codecontext-darwin-arm64
        
        # Generate checksums
        cd release && sha256sum * > checksums.txt

    - name: Delete existing development release
      run: |
        gh release delete latest --yes || true
        git push origin :refs/tags/latest || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create development release
      uses: ncipollo/release-action@v1
      with:
        tag: latest
        name: "Latest Development Build"
        body: |
          Latest development build from main branch.

          **⚠️ This is an automated development build and may be unstable.**

          Commit: ${{ github.sha }}
        artifacts: "release/*"
        makeLatest: false
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}

  ###########################################################
  publish-stable:
  ###########################################################
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    needs: [release-please, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare stable release
      run: |
        mkdir -p release
        VERSION="${{ needs.release-please.outputs.version }}"
        
        # Create versioned binaries
        cp artifacts/codecontext-linux-amd64/codecontext release/codecontext-${VERSION}-linux-amd64
        cp artifacts/codecontext-linux-arm64/codecontext release/codecontext-${VERSION}-linux-arm64
        cp artifacts/codecontext-windows-amd64/codecontext.exe release/codecontext-${VERSION}-windows-amd64.exe
        cp artifacts/codecontext-darwin-amd64/codecontext release/codecontext-${VERSION}-darwin-amd64
        cp artifacts/codecontext-darwin-arm64/codecontext release/codecontext-${VERSION}-darwin-arm64
        
        # Generate checksums
        cd release && sha256sum * > checksums.txt

    - name: Upload release assets
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.release-please.outputs.tag_name }}
        artifacts: "release/*"
        allowUpdates: true
        omitDraftDuringUpdate: true
        token: ${{ secrets.GITHUB_TOKEN }}